name: 🚀 Production Deployment with Environment Setup

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

jobs:
  # GitHub Spec Kit Integration
  spec-kit-validation:
    name: 📋 Spec Kit Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📋 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 🔍 Run Spec Kit validation
        run: |
          if [ -f "spec-kit.config.js" ]; then
            echo "✅ Spec Kit configuration found"
            npx @github/spec-kit validate
          else
            echo "⚠️ Spec Kit not configured, skipping validation"
          fi

      - name: 📊 Generate spec report
        run: |
          if [ -f "spec-kit.config.js" ]; then
            npx @github/spec-kit report --format=json > spec-report.json
            echo "📊 Spec report generated"
          fi

  # Quality Gates
  quality-gates:
    name: 🛡️ Quality Gates
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📋 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 🔍 Lint check
        run: npm run lint

      - name: 🔧 Type check
        run: npm run type-check

      - name: 🧪 Run tests
        run: npm run test

      - name: 🔒 Security audit
        run: npm run test:security

      - name: 🏗️ Build check
        run: npm run build

  # Environment Setup (Production Only)
  setup-production-env:
    name: ⚙️ Setup Production Environment
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [quality-gates]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup production environment variables
        run: |
          if [ ! -z "${{ secrets.VERCEL_TOKEN }}" ]; then
            echo "🚀 Setting up production environment..."
            export VERCEL_TOKEN="${{ secrets.VERCEL_TOKEN }}"
            ./scripts/setup-production-env.sh
          else
            echo "⚠️ VERCEL_TOKEN not found in secrets. Skipping environment setup."
          fi

  # Vercel Deployment
  deploy-vercel:
    name: 🌐 Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [quality-gates]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Install Vercel CLI
        run: npm install -g vercel@latest

      - name: 🔗 Pull Vercel environment
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🏗️ Build project artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🚀 Deploy to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  # Post-Deployment Verification
  post-deployment:
    name: ✅ Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: [deploy-vercel, setup-production-env]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🌐 Verify deployment
        run: |
          echo "🔍 Verifying deployment at https://www.cerebrumbiologyacademy.com"

          # Wait for deployment to be ready
          sleep 30

          # Check if site is accessible
          if curl -sSf https://www.cerebrumbiologyacademy.com > /dev/null; then
            echo "✅ Site is accessible"
          else
            echo "❌ Site is not accessible"
            exit 1
          fi

      - name: 🧪 Run lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun || echo "⚠️ Lighthouse CI failed, but deployment continues"

      - name: 📊 Performance check
        run: |
          echo "📊 Running basic performance checks..."

          # Check response time
          response_time=$(curl -o /dev/null -s -w '%{time_total}' https://www.cerebrumbiologyacademy.com)
          echo "⏱️ Response time: ${response_time}s"

          if (( $(echo "$response_time < 3.0" | bc -l) )); then
            echo "✅ Response time is acceptable"
          else
            echo "⚠️ Response time is slower than expected"
          fi

      - name: 📧 Deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful! Site is live at https://www.cerebrumbiologyacademy.com"
          else
            echo "❌ Deployment failed or has issues"
          fi

  # Environment Variables Audit (Weekly)
  env-audit:
    name: 🔍 Environment Variables Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Audit environment variables
        run: |
          echo "🔍 Auditing environment variables..."

          # Check required variables in code
          echo "📋 Required variables found in code:"
          grep -r "process\.env\." --include="*.ts" --include="*.tsx" src/ | \
            grep -o "process\.env\.[A-Z_][A-Z0-9_]*" | \
            sort | uniq | head -20

          echo ""
          echo "📋 Variables that need real values (replace placeholders):"
          echo "- NEXT_PUBLIC_GA_MEASUREMENT_ID"
          echo "- RAZORPAY_KEY_ID & RAZORPAY_KEY_SECRET"
          echo "- WHATSAPP_ACCESS_TOKEN & WHATSAPP_PHONE_NUMBER_ID"
          echo "- DATABASE_URL"
          echo "- OPENAI_API_KEY (if using AI features)"

# Schedule for weekly environment audit
on:
  schedule:
    - cron: '0 9 * * MON'  # Every Monday at 9 AM UTC

# Manual trigger option
  workflow_dispatch:
    inputs:
      force_env_setup:
        description: 'Force environment setup'
        required: false
        default: 'false'
        type: boolean