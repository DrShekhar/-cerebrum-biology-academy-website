name: 🚀 Production Deployment - Ceri AI System

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if checks fail'
        required: false
        default: 'false'
        type: boolean

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  NODE_VERSION: '22'

jobs:
  # Quality Checks (Fast Fail)
  quality-check:
    name: 🔍 Quality Checks
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.quality.outputs.should_deploy }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📋 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 🔍 Run quality checks
        id: quality
        run: |
          echo "🔍 Running quality checks..."

          # Lint check (allow warnings)
          if npm run lint; then
            echo "✅ Lint passed"
          else
            echo "⚠️ Lint warnings found, continuing..."
          fi

          # Type check (critical)
          if npm run type-check; then
            echo "✅ TypeScript check passed"
          else
            echo "❌ TypeScript errors found"
            if [ "${{ github.event.inputs.force_deploy }}" != "true" ]; then
              exit 1
            else
              echo "⚠️ Force deploy enabled, continuing despite errors..."
            fi
          fi

          # Build test (critical)
          if npm run build; then
            echo "✅ Build successful"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Build failed"
            if [ "${{ github.event.inputs.force_deploy }}" != "true" ]; then
              exit 1
            else
              echo "⚠️ Force deploy enabled, continuing despite build failure..."
              echo "should_deploy=true" >> $GITHUB_OUTPUT
            fi
          fi

  # Production Deployment
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: quality-check
    if: needs.quality-check.outputs.should_deploy == 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 🏗️ Build for production
        run: npm run build
        env:
          NODE_ENV: production

      - name: 🚀 Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./

      - name: 🔗 Get deployment URL
        id: deployment-url
        run: |
          echo "deployment-url=${{ steps.deploy.outputs.preview-url }}" >> $GITHUB_OUTPUT
          echo "🌐 Deployment URL: ${{ steps.deploy.outputs.preview-url }}"

  # Post-Deployment Verification
  verify:
    name: ✅ Verify Deployment
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && needs.deploy.result == 'success'
    steps:
      - name: 🔍 Verify Ceri AI system
        run: |
          echo "🔍 Verifying Ceri AI deployment..."

          # Wait for deployment to be ready
          sleep 30

          # Test main domain
          if curl -sSf https://cerebrumbiologyacademy.com > /dev/null; then
            echo "✅ Main domain accessible"
          else
            echo "⚠️ Main domain not accessible, checking www..."
          fi

          # Test www domain
          if curl -sSf https://www.cerebrumbiologyacademy.com > /dev/null; then
            echo "✅ WWW domain accessible"
          else
            echo "❌ WWW domain not accessible"
          fi

          # Test AI chat endpoint
          response=$(curl -s -o /dev/null -w "%{http_code}" https://www.cerebrumbiologyacademy.com/api/ai/unified-chat)
          if [ "$response" -eq "405" ] || [ "$response" -eq "401" ]; then
            echo "✅ AI API endpoint exists (returns $response)"
          else
            echo "⚠️ AI API endpoint returns: $response"
          fi

          # Test chat page
          if curl -s https://www.cerebrumbiologyacademy.com/claudechat | grep -q "Ceri\|chat"; then
            echo "✅ Chat page accessible"
          else
            echo "⚠️ Chat page may have issues"
          fi

      - name: 📊 Deployment Summary
        run: |
          echo "🎉 Ceri AI Deployment Summary"
          echo "=============================="
          echo "✅ Quality checks: Passed"
          echo "✅ Build: Successful"
          echo "✅ Deploy: Completed"
          echo "🌐 Live URLs:"
          echo "  - Main: https://cerebrumbiologyacademy.com"
          echo "  - WWW: https://www.cerebrumbiologyacademy.com"
          echo "  - Chat: https://www.cerebrumbiologyacademy.com/claudechat"
          echo "🤖 Ceri AI Features:"
          echo "  - Anthropic Claude ✅"
          echo "  - OpenAI GPT ✅"
          echo "  - Google AI ✅"
          echo "  - Mobile Responsive ✅"
          echo "  - Error Boundaries ✅"