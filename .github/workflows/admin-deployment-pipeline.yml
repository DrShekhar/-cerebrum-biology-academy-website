name: 🚀 Admin Panel Deployment Pipeline

on:
  push:
    branches: [main]
    paths:
      - 'src/app/admin/**'
      - 'src/app/api/admin/**'
      - 'src/components/admin/**'
      - 'middleware.ts'
      - 'vercel.json'
      - 'package.json'
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  ADMIN_ACCESS_KEY: ${{ secrets.ADMIN_ACCESS_KEY }}
  SITE_URL: https://cerebrum-biology-academy-website.vercel.app

jobs:
  pre-deployment-validation:
    name: 🔍 Pre-deployment Validation
    runs-on: ubuntu-latest
    outputs:
      admin-files-exist: ${{ steps.check-files.outputs.admin-files-exist }}
      build-success: ${{ steps.build.outputs.success }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 📦 Install Dependencies
        run: npm ci
        
      - name: 🔍 Check Admin Files Exist
        id: check-files
        run: |
          echo "🔍 Checking for admin files..."
          ADMIN_FILES_MISSING=0
          
          # Check critical admin files
          [ ! -f "src/app/admin/page.tsx" ] && echo "❌ Admin dashboard missing" && ADMIN_FILES_MISSING=1
          [ ! -f "src/app/admin/login/page.tsx" ] && echo "❌ Admin login missing" && ADMIN_FILES_MISSING=1
          [ ! -f "src/app/api/admin/demo-bookings/route.ts" ] && echo "❌ Admin API missing" && ADMIN_FILES_MISSING=1
          [ ! -f "middleware.ts" ] && echo "❌ Middleware missing" && ADMIN_FILES_MISSING=1
          [ ! -f "src/components/admin/DemoBookingModal.tsx" ] && echo "❌ Demo booking modal missing" && ADMIN_FILES_MISSING=1
          
          if [ $ADMIN_FILES_MISSING -eq 0 ]; then
            echo "✅ All admin files present"
            echo "admin-files-exist=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Some admin files are missing"
            echo "admin-files-exist=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
      - name: 🏗️ Build Project
        id: build
        run: |
          echo "🏗️ Building project..."
          npm run build > build.log 2>&1
          BUILD_EXIT_CODE=$?
          
          # Check if admin routes are in build output
          if grep -q "/admin.*kB" build.log; then
            echo "✅ Admin routes found in build output"
            cat build.log | grep -E "(admin|/admin)"
          else
            echo "❌ Admin routes NOT found in build output"
            cat build.log
            exit 1
          fi
          
          if [ $BUILD_EXIT_CODE -eq 0 ]; then
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
      - name: 📊 Upload Build Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: build.log

  deploy-to-vercel:
    name: 🚀 Deploy to Vercel
    runs-on: ubuntu-latest
    needs: pre-deployment-validation
    if: needs.pre-deployment-validation.outputs.admin-files-exist == 'true' && needs.pre-deployment-validation.outputs.build-success == 'true'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-args: '--prod'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./

  post-deployment-verification:
    name: ✅ Post-deployment Verification
    runs-on: ubuntu-latest
    needs: deploy-to-vercel
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 📦 Install Dependencies
        run: npm ci
        
      - name: ⏳ Wait for Deployment
        run: |
          echo "⏳ Waiting for deployment to propagate..."
          sleep 60
          
      - name: 🔍 Run Deployment Monitor
        env:
          SITE_URL: ${{ env.SITE_URL }}
          ADMIN_ACCESS_KEY: ${{ env.ADMIN_ACCESS_KEY }}
        run: |
          echo "🔍 Running deployment verification..."
          node scripts/deployment-monitor.js
          
      - name: 📊 Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-reports
          path: deployment-reports/
          
      - name: 📧 Create Deployment Summary
        if: always()
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Site URL:** ${{ env.SITE_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Time:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "deployment-reports/latest-deployment-report.json" ]; then
            echo "### Test Results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            TOTAL_TESTS=$(jq -r '.summary.totalTests' deployment-reports/latest-deployment-report.json)
            PASSED_TESTS=$(jq -r '.summary.passedTests' deployment-reports/latest-deployment-report.json)
            FAILED_TESTS=$(jq -r '.summary.failedTests' deployment-reports/latest-deployment-report.json)
            CRITICAL_FAILURES=$(jq -r '.summary.criticalFailures' deployment-reports/latest-deployment-report.json)
            
            echo "- **Total Tests:** $TOTAL_TESTS" >> $GITHUB_STEP_SUMMARY
            echo "- **✅ Passed:** $PASSED_TESTS" >> $GITHUB_STEP_SUMMARY
            echo "- **❌ Failed:** $FAILED_TESTS" >> $GITHUB_STEP_SUMMARY
            echo "- **🚨 Critical Failures:** $CRITICAL_FAILURES" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ $CRITICAL_FAILURES -gt 0 ]; then
              echo "### 🚨 Critical Issues Found" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "❌ **DEPLOYMENT FAILED:** Critical admin routes are not accessible" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Admin Routes to Check:**" >> $GITHUB_STEP_SUMMARY
              echo "- [Admin Dashboard](${{ env.SITE_URL }}/admin)" >> $GITHUB_STEP_SUMMARY
              echo "- [Admin Login](${{ env.SITE_URL }}/admin/login)" >> $GITHUB_STEP_SUMMARY
              echo "- [Admin Enrollments](${{ env.SITE_URL }}/admin/enrollments)" >> $GITHUB_STEP_SUMMARY
              
              exit 1
            else
              echo "### ✅ Deployment Successful" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "All admin routes are accessible and functional!" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Access Admin Panel:**" >> $GITHUB_STEP_SUMMARY
              echo "- 🏠 [Admin Dashboard](${{ env.SITE_URL }}/admin)" >> $GITHUB_STEP_SUMMARY
              echo "- 🔐 [Admin Login](${{ env.SITE_URL }}/admin/login)" >> $GITHUB_STEP_SUMMARY
              echo "- 📊 [Admin Enrollments](${{ env.SITE_URL }}/admin/enrollments)" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ **No test report generated**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  rollback-on-failure:
    name: 🔄 Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-to-vercel, post-deployment-verification]
    if: failure() && needs.deploy-to-vercel.result == 'success'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔄 Rollback Deployment
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-args: '--prod --force'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          github-comment: false
          
      - name: 📧 Notify Rollback
        run: |
          echo "## 🔄 Automatic Rollback Performed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "❌ **Deployment verification failed** - rolled back to previous version" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Check deployment reports in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "2. Fix admin panel deployment issues" >> $GITHUB_STEP_SUMMARY
          echo "3. Set ADMIN_ACCESS_KEY environment variable in Vercel" >> $GITHUB_STEP_SUMMARY
          echo "4. Re-run deployment workflow" >> $GITHUB_STEP_SUMMARY