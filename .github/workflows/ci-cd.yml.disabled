name: 🚀 CI/CD Pipeline - Cerebrum Biology Academy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # 🔍 Code Quality Checks
  quality-checks:
    name: 🔍 Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📋 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 🔧 TypeScript compilation
        run: npx tsc --noEmit

      - name: 🧹 ESLint check
        run: npm run lint

      - name: 🎨 Prettier check
        run: npx prettier --check .

      - name: 🧪 Run tests
        run: npm run test --if-present

      - name: 📊 Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: false

  # 🏗️ Build and Test
  build-test:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    needs: quality-checks

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📋 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 🏗️ Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SITE_URL: https://cerebrumbiologyacademy.com
          DATABASE_URL: file:./test.db

      - name: 🧪 Run E2E tests
        run: npm run test:e2e --if-present

      - name: 📁 Upload build artifacts
        if: matrix.node-version == 18
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: .next/
          retention-days: 7

  # 🚀 Deploy to Vercel
  deploy-vercel:
    name: 🚀 Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [quality-checks, build-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📋 Install Vercel CLI
        run: npm install --global vercel@latest

      - name: 🔧 Pull Vercel environment
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🏗️ Build project artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🚀 Deploy to production
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🔗 Get deployment URL
        id: deployment
        run: |
          echo "url=$(vercel ls --token=${{ secrets.VERCEL_TOKEN }} | head -n 1 | awk '{print $2}')" >> $GITHUB_OUTPUT

      - name: 📋 Comment deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 **Deployment successful!**\n\n🔗 **Preview URL:** ${{ steps.deployment.outputs.url }}'
            })

  # 🔍 Security Scan
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: quality-checks

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📋 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 🔍 Run security audit
        run: npm audit --audit-level=high

      - name: 🛡️ Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # 📊 Performance Testing
  performance-test:
    name: 📊 Performance Test
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📋 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 🏗️ Build for performance testing
        run: npm run build

      - name: 🏃‍♂️ Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # 📢 Notifications
  notify-success:
    name: 📢 Success Notification
    runs-on: ubuntu-latest
    needs: [deploy-vercel, security-scan, performance-test]
    if: success() && github.ref == 'refs/heads/main'

    steps:
      - name: 🎉 Notify success
        uses: actions/github-script@v6
        with:
          script: |
            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${Date.now()}`,
              name: `Production Release - ${new Date().toISOString().split('T')[0]}`,
              body: `🚀 **Successful deployment to production**\n\n✅ All quality checks passed\n✅ Security scan completed\n✅ Performance test passed\n\n**Deployment URL:** https://cerebrumbiologyacademy.com`,
              draft: false,
              prerelease: false
            });

  notify-failure:
    name: 📢 Failure Notification
    runs-on: ubuntu-latest
    needs: [quality-checks, build-test, deploy-vercel, security-scan]
    if: failure()

    steps:
      - name: 🚨 Notify failure
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 CI/CD Pipeline Failed - ${context.sha.substring(0, 7)}`,
              body: `**Pipeline failed for commit:** ${context.sha}\n\n**Branch:** ${context.ref}\n\n**Workflow:** ${context.workflow}\n\n**Run:** ${context.runNumber}\n\n**Please check the workflow logs for details.**`,
              labels: ['bug', 'ci-cd', 'urgent']
            });