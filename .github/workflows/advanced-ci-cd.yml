# Advanced GitHub Actions CI/CD Pipeline
# Complete automated testing, quality checks, staging deployment, and production deployment with rollback

name: 🚀 Advanced CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      rollback:
        description: 'Rollback to previous version'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: 'Skip test execution (emergency deployments only)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Code Quality & Security Analysis
  quality-security:
    name: 🔍 Quality & Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      quality-score: ${{ steps.sonar.outputs.quality-gate-status }}
      security-passed: ${{ steps.security.outputs.passed }}
      should-deploy: ${{ steps.gate.outputs.should-deploy }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for better relevancy of analysis

      - name: 🏗️ Setup Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm ls --depth=0

      - name: 🧹 Code Quality Checks
        run: |
          # ESLint with detailed reporting
          npm run lint:report || true

          # TypeScript compilation check
          npx tsc --noEmit --incremental false

          # Prettier formatting check
          npx prettier --check . --write=false

      - name: 🔒 Security Vulnerability Scan
        id: security
        run: |
          # NPM audit with detailed output
          npm audit --audit-level=moderate --json > npm-audit.json || true

          # Check for high/critical vulnerabilities
          HIGH_VULNS=$(cat npm-audit.json | jq '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULNS=$(cat npm-audit.json | jq '.metadata.vulnerabilities.critical // 0')

          if [ "$HIGH_VULNS" -gt 0 ] || [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "❌ High/Critical vulnerabilities found: High=$HIGH_VULNS, Critical=$CRITICAL_VULNS"
            echo "passed=false" >> $GITHUB_OUTPUT
          else
            echo "✅ No high/critical vulnerabilities found"
            echo "passed=true" >> $GITHUB_OUTPUT
          fi

      - name: 📊 SonarCloud Analysis
        id: sonar
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=cerebrum-biology-academy
            -Dsonar.organization=drshekhar
            -Dsonar.sources=src
            -Dsonar.exclusions=**/*.test.ts,**/*.test.tsx,**/node_modules/**

      - name: 🚪 Quality Gate Decision
        id: gate
        run: |
          if [ "${{ steps.security.outputs.passed }}" == "true" ] && [ "${{ steps.sonar.outputs.quality-gate-status }}" == "PASSED" ]; then
            echo "✅ All quality gates passed"
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Quality gate failed"
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: 📤 Upload Quality Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-reports
          path: |
            npm-audit.json
            eslint-report.json
            coverage/
          retention-days: 30

  # Job 2: Comprehensive Testing Suite
  test-suite:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: quality-security
    if: github.event.inputs.skip_tests != 'true'
    strategy:
      fail-fast: false
      matrix:
        test-type: [unit, integration, api, e2e]
        node-version: [18, 20]
        exclude:
          - test-type: e2e
            node-version: 20 # Run E2E only on Node 18

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline

      - name: 🗄️ Setup Test Database
        if: matrix.test-type != 'unit'
        run: |
          docker run -d \
            --name test-postgres-${{ matrix.test-type }} \
            -e POSTGRES_PASSWORD=testpass \
            -e POSTGRES_DB=cerebrum_test_${{ matrix.test-type }} \
            -p ${{ matrix.test-type == 'api' && '5433' || '5432' }}:5432 \
            postgres:15-alpine

          # Wait for database to be ready
          sleep 10

      - name: 🔧 Setup Test Environment
        run: |
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://postgres:testpass@localhost:5432/cerebrum_test_${{ matrix.test-type }}" >> .env.test
          echo "NODE_ENV=test" >> .env.test

      - name: 🧪 Run ${{ matrix.test-type }} Tests
        run: |
          case "${{ matrix.test-type }}" in
            "unit")
              npm run test:unit -- --coverage --maxWorkers=2 --passWithNoTests
              ;;
            "integration")
              npm run test:integration -- --coverage --maxWorkers=1 --passWithNoTests
              ;;
            "api")
              npm run test:api -- --coverage --maxWorkers=1 --passWithNoTests
              ;;
            "e2e")
              # Install Playwright browsers
              npx playwright install --with-deps chromium firefox webkit
              npm run test:e2e -- --maxWorkers=1
              ;;
          esac

      - name: 📊 Upload Test Coverage
        if: matrix.test-type != 'e2e'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: ${{ matrix.test-type }}-node${{ matrix.node-version }}
          name: ${{ matrix.test-type }}-coverage

      - name: 📤 Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}-node${{ matrix.node-version }}
          path: |
            test-results/
            coverage/
            playwright-report/
          retention-days: 30

      - name: 🧹 Cleanup Test Environment
        if: always()
        run: |
          docker stop test-postgres-${{ matrix.test-type }} || true
          docker rm test-postgres-${{ matrix.test-type }} || true

  # Job 3: Build and Package Application
  build-package:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [quality-security, test-suite]
    if: needs.quality-security.outputs.should-deploy == 'true'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --omit=dev

      - name: 🔢 Generate Version
        id: version
        run: |
          VERSION=$(date +%Y%m%d)-${GITHUB_SHA::7}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: 🏗️ Build Application
        run: |
          npm run build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1

      - name: 📊 Analyze Bundle Size
        run: |
          npx @next/bundle-analyzer --help || npm install -g @next/bundle-analyzer
          npm run analyze || echo "Bundle analysis skipped"

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ steps.version.outputs.version }}

      - name: 🏗️ Build and Push Docker Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_VERSION=${{ env.NODE_VERSION }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.version.outputs.version }}

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ steps.version.outputs.version }}
          path: |
            .next/
            public/
            package.json
            package-lock.json
            next.config.js
          retention-days: 30

  # Job 4: Security Scanning
  security-scan:
    name: 🛡️ Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build-package
    if: always() && needs.build-package.result == 'success'

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy Container Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-package.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy Results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🔒 OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'https://staging.cerebrumbiologyacademy.com'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: 📤 Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            trivy-results.sarif
            report_html.html
            report_md.md
            report_json.json
          retention-days: 30

  # Job 5: Performance Testing
  performance-test:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: build-package

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Performance Tools
        run: |
          npm install -g lighthouse@latest
          npm install -g artillery@latest
          npm install -g @lhci/cli@latest

      - name: 🚀 Lighthouse Performance Audit
        run: |
          lighthouse https://staging.cerebrumbiologyacademy.com \
            --output=json \
            --output=html \
            --output-path=./lighthouse-report \
            --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage"

      - name: 🔄 Load Testing with Artillery
        run: |
          echo "config:
            target: 'https://staging.cerebrumbiologyacademy.com'
            phases:
              - duration: 60
                arrivalRate: 10
            processor: './test-functions.js'
          scenarios:
            - name: 'Homepage'
              requests:
                - get:
                    url: '/'
            - name: 'API Health Check'
              requests:
                - get:
                    url: '/api/health'" > load-test.yml

          artillery run load-test.yml --output artillery-report.json

      - name: 📊 Bundle Size Analysis
        run: |
          npx bundle-size-analyzer .next/static/chunks/*.js > bundle-analysis.txt || true

      - name: 📤 Upload Performance Reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: |
            lighthouse-report.*
            artillery-report.json
            bundle-analysis.txt
          retention-days: 30

  # Job 6: Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [quality-security, test-suite, build-package, security-scan]
    if: |
      always() &&
      needs.quality-security.outputs.should-deploy == 'true' &&
      (needs.test-suite.result == 'success' || github.event.inputs.skip_tests == 'true') &&
      (github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.cerebrumbiologyacademy.com

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📋 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ needs.build-package.outputs.version }}

      - name: 🚀 Deploy to Vercel Staging
        id: deploy
        run: |
          npx vercel --token ${{ secrets.VERCEL_TOKEN }} \
            --scope ${{ secrets.VERCEL_ORG_ID }} \
            --confirm \
            --env NODE_ENV=staging \
            --env DATABASE_URL="${{ secrets.STAGING_DATABASE_URL }}" \
            --env REDIS_URL="${{ secrets.STAGING_REDIS_URL }}" \
            --env NEXT_PUBLIC_APP_ENV=staging

      - name: 🧪 Smoke Tests
        run: |
          sleep 30 # Wait for deployment to propagate

          # Health check endpoints
          curl -f https://staging.cerebrumbiologyacademy.com/api/health || exit 1
          curl -f https://staging.cerebrumbiologyacademy.com/ || exit 1

          # API endpoints
          curl -f https://staging.cerebrumbiologyacademy.com/api/subscription-tiers?action=get_all_tiers || exit 1

      - name: 📢 Notify Staging Deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          text: |
            ${{ job.status == 'success' && '✅' || '❌' }} Staging Deployment ${{ job.status }}
            🌿 Branch: ${{ github.ref_name }}
            🔗 URL: https://staging.cerebrumbiologyacademy.com
            📦 Version: ${{ needs.build-package.outputs.version }}

  # Job 7: Deploy to Production
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [deploy-staging, performance-test]
    if: |
      always() &&
      needs.deploy-staging.result == 'success' &&
      (github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://cerebrumbiologyacademy.com

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📋 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ needs.build-package.outputs.version }}

      - name: 💾 Backup Current Deployment
        id: backup
        run: |
          # Get current deployment info
          CURRENT_DEPLOYMENT=$(vercel ls --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }} | head -2 | tail -1 | awk '{print $1}')
          echo "current-deployment=$CURRENT_DEPLOYMENT" >> $GITHUB_OUTPUT
          echo "Backing up deployment: $CURRENT_DEPLOYMENT"

      - name: 🚀 Deploy to Production
        id: deploy
        run: |
          # Deploy to production
          DEPLOYMENT_URL=$(npx vercel --token ${{ secrets.VERCEL_TOKEN }} \
            --scope ${{ secrets.VERCEL_ORG_ID }} \
            --prod \
            --confirm \
            --env NODE_ENV=production \
            --env DATABASE_URL="${{ secrets.PRODUCTION_DATABASE_URL }}" \
            --env REDIS_URL="${{ secrets.PRODUCTION_REDIS_URL }}" \
            --env NEXT_PUBLIC_APP_ENV=production)

          echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: ⏳ Health Check & Monitoring
        run: |
          echo "Waiting for deployment to propagate..."
          sleep 60

          # Comprehensive health checks
          for i in {1..5}; do
            echo "Health check attempt $i/5"

            # Main endpoints
            curl -f https://cerebrumbiologyacademy.com/api/health
            curl -f https://cerebrumbiologyacademy.com/

            # Key functionality
            curl -f https://cerebrumbiologyacademy.com/api/subscription-tiers?action=get_all_tiers
            curl -f https://cerebrumbiologyacademy.com/api/payments

            echo "✅ Health check $i passed"
            sleep 10
          done

      - name: 📊 Post-Deployment Metrics
        run: |
          # Record deployment metrics
          echo "Recording deployment success metrics..."

          # Performance baseline
          npx lighthouse https://cerebrumbiologyacademy.com \
            --output=json \
            --output-path=prod-baseline.json \
            --chrome-flags="--headless --no-sandbox"

      - name: 📢 Notify Production Deployment
        uses: 8398a7/action-slack@v3
        with:
          status: 'success'
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          text: |
            🎉 Production Deployment Successful!
            🌍 URL: https://cerebrumbiologyacademy.com
            📦 Version: ${{ needs.build-package.outputs.version }}
            🔗 Commit: ${{ github.sha }}
            👤 Deployed by: ${{ github.actor }}

  # Job 8: Automatic Rollback
  rollback:
    name: 🔄 Rollback Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: |
      always() &&
      (failure() || github.event.inputs.rollback == 'true') &&
      needs.deploy-production.outputs.current-deployment != ''
    needs: [deploy-production]

    steps:
      - name: 🔄 Execute Rollback
        run: |
          echo "Rolling back to previous deployment..."

          # Rollback using Vercel
          vercel rollback ${{ needs.deploy-production.outputs.current-deployment }} \
            --token ${{ secrets.VERCEL_TOKEN }} \
            --scope ${{ secrets.VERCEL_ORG_ID }} \
            --yes

      - name: 🧪 Post-Rollback Health Check
        run: |
          sleep 30 # Wait for rollback to propagate

          curl -f https://cerebrumbiologyacademy.com/api/health || exit 1
          curl -f https://cerebrumbiologyacademy.com/ || exit 1

      - name: 📢 Notify Rollback
        uses: 8398a7/action-slack@v3
        with:
          status: 'warning'
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          text: |
            ⚠️ Automatic Rollback Executed
            🔄 Rolled back to: ${{ needs.deploy-production.outputs.current-deployment }}
            🔍 Reason: Deployment failure detected
            👤 Triggered by: ${{ github.actor }}

  # Job 9: Post-Deployment Monitoring
  post-deployment:
    name: 📊 Post-Deployment Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [deploy-production]
    if: needs.deploy-production.result == 'success'

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📊 Setup Monitoring
        run: |
          echo "Setting up post-deployment monitoring..."

          # Performance monitoring
          npx lighthouse https://cerebrumbiologyacademy.com \
            --output=json \
            --output-path=post-deploy-metrics.json \
            --chrome-flags="--headless --no-sandbox"

      - name: 🔔 Setup Alerts
        run: |
          echo "Deployment monitoring activated"
          echo "Version: ${{ needs.build-package.outputs.version }}"
          echo "Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"

      - name: 📤 Archive Deployment Info
        uses: actions/upload-artifact@v4
        with:
          name: deployment-info-${{ needs.build-package.outputs.version }}
          path: |
            post-deploy-metrics.json
          retention-days: 90

      - name: 📈 Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.build-package.outputs.version }}
          release_name: Production Release v${{ needs.build-package.outputs.version }}
          body: |
            ## 🚀 Production Deployment Successful

            **Version:** ${{ needs.build-package.outputs.version }}
            **Commit:** ${{ github.sha }}
            **Deployed by:** ${{ github.actor }}
            **Deployment Time:** ${{ github.event.head_commit.timestamp }}

            ### ✅ Quality Gates
            - Code Quality: ✅ Passed
            - Security Scan: ✅ Passed
            - Test Suite: ✅ Passed
            - Performance: ✅ Validated

            ### 🔗 Links
            - **Production:** https://cerebrumbiologyacademy.com
            - **Staging:** https://staging.cerebrumbiologyacademy.com

            ### 📊 Metrics
            - Build Time: ${{ needs.build-package.duration }}
            - Test Coverage: View in Codecov
            - Bundle Size: See artifacts
          draft: false
          prerelease: false