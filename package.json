{
  "name": "cerebrum-biology-academy-website",
  "version": "1.0.2",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "test:local": "npm run build && npm run start",
    "deploy:quick": "git add . && git commit && git push",
    "lint": "eslint",
    "lint:fix": "eslint --fix",
    "format": "prettier --write .",
    "type-check": "tsc --noEmit",
    "prepare": "echo 'Skipping husky in CI'",
    "test": "jest --config jest.config.cjs",
    "test:watch": "jest --watch --config jest.config.cjs",
    "test:coverage": "jest --coverage --config jest.config.cjs",
    "test:security": "npm audit --audit-level=high && node scripts/security-check.js",
    "test:e2e": "playwright test",
    "test:integration": "jest --config jest.integration.config.js",
    "test:perf": "node scripts/performance-test.js",
    "test:load": "artillery run scripts/load-test.yml",
    "test:whatsapp-bot": "npx ts-node scripts/test-whatsapp-bot.ts",
    "verify-completion": "node scripts/verify-completion.js",
    "deploy:monitor": "node scripts/deployment-monitor.js",
    "deploy:verify": "npm run deploy:monitor && echo 'âœ… Deployment verified'",
    "deploy:force": "git add . && git commit -m 'ðŸš€ Force deployment trigger' && git push",
    "deploy:pre-check": "tsx scripts/pre-deploy-check.ts",
    "deploy:post-validate": "tsx scripts/post-deploy-validate.ts",
    "deploy:production": "npm run deploy:pre-check && vercel deploy --prod && npm run deploy:post-validate",
    "vercel:deploy": "vercel deploy --prod",
    "vercel:preview": "vercel deploy",
    "env:validate": "tsx scripts/setup-env-production.ts",
    "env:vercel-commands": "tsx scripts/setup-env-production.ts --vercel-commands",
    "backup:create": "tsx scripts/backup-production.ts",
    "backup:upload": "tsx scripts/backup-production.ts --upload",
    "backup:clean": "tsx scripts/backup-production.ts --clean",
    "create:component": "node scripts/create-component.js",
    "dev:safe": "npm run type-check && npm run lint && npm run dev",
    "build:analyze": "ANALYZE=true npm run build",
    "clean": "rm -rf .next && rm -rf node_modules/.cache",
    "fresh-install": "rm -rf node_modules package-lock.json && npm install",
    "workflow:check": "node scripts/workflow-check.js",
    "workflow:setup": "bash scripts/setup-workflow-aliases.sh",
    "workflow:guide": "echo 'ðŸš€ Cerebrum Workflow Guide:' && echo '1. git workflow-status - Check current status' && echo '2. git start-feature name - Start new feature' && echo '3. npm run create:component Name - Generate component' && echo '4. npm run dev:safe - Safe development' && echo '5. git safe-commit \"msg\" - Commit with checks' && echo '6. git finish-feature - Push and PR' && echo '' && echo 'ðŸ“š For detailed guide: cat DEVELOPMENT_WORKFLOW.md'",
    "claude:prompt": "node scripts/claude-prompt-agent.js",
    "claude:ads": "node scripts/claude-prompt-agent.js google-ads",
    "claude:whatsapp": "node scripts/claude-prompt-agent.js whatsapp-automation",
    "claude:payments": "node scripts/claude-prompt-agent.js payment-processing",
    "claude:international": "node scripts/claude-prompt-agent.js international-testing",
    "claude:ai": "node scripts/claude-prompt-agent.js ai-integration",
    "claude:analytics": "node scripts/claude-prompt-agent.js analytics-dashboard",
    "claude:free-resources": "node scripts/claude-prompt-agent.js free-resources-system",
    "claude:spec-kit": "node scripts/claude-prompt-agent.js spec-kit-integration",
    "spec:check": "export PATH=\"/Users/drshekhar/.local/bin:$PATH\" && uvx --from git+https://github.com/github/spec-kit.git specify check",
    "spec:init": "export PATH=\"/Users/drshekhar/.local/bin:$PATH\" && uvx --from git+https://github.com/github/spec-kit.git specify init",
    "whatsapp:setup": "node scripts/setup-whatsapp-api.js",
    "whatsapp:test": "node scripts/test-whatsapp-automation.js",
    "test:whatsapp": "npm run whatsapp:test",
    "test:ai:quality": "jest --config jest.config.cjs src/__tests__/ai/",
    "test:ai:mock:start": "node scripts/start-ai-mock-server.js",
    "test:ai:mock:stop": "pkill -f ai-mock-server || true",
    "test:accessibility": "playwright test --project=accessibility",
    "test:mobile": "playwright test --project=\"Mobile Chrome\"",
    "test:performance:full": "playwright test --project=performance",
    "test:security:scan": "playwright test tests/security/",
    "test:all": "npm run test && npm run test:integration && npm run test:e2e && npm run test:performance:full",
    "db:generate": "prisma generate",
    "db:migrate": "prisma migrate deploy",
    "db:migrate:dev": "prisma migrate dev",
    "db:migrate:reset": "prisma migrate reset",
    "db:seed": "tsx prisma/seed.ts",
    "db:studio": "prisma studio",
    "db:push": "prisma db push",
    "db:test:setup": "NODE_ENV=test prisma migrate deploy && NODE_ENV=test tsx prisma/seed.ts",
    "db:test:reset": "NODE_ENV=test prisma migrate reset --force",
    "db:test:seed": "NODE_ENV=test tsx prisma/seed.ts",
    "db:test:cleanup": "NODE_ENV=test prisma migrate reset --force",
    "redis:start": "redis-server",
    "redis:cli": "redis-cli",
    "redis:flush": "redis-cli flushall",
    "cache:warm": "tsx scripts/warm-cache.ts",
    "health:check": "tsx scripts/health-check.ts",
    "agent": "tsx scripts/agent-workflow.ts",
    "agent:status": "tsx scripts/agent-status.ts",
    "agent:list": "tsx scripts/agent-list.ts",
    "mcp:biology": "tsx src/lib/mcp/servers/biology-content.ts",
    "mcp:test": "echo 'Testing MCP server (will run for 3 seconds)...' && (timeout 3 tsx src/lib/mcp/servers/biology-content.ts 2>&1 || gtimeout 3 tsx src/lib/mcp/servers/biology-content.ts 2>&1 || (tsx src/lib/mcp/servers/biology-content.ts & sleep 3 && kill $! 2>/dev/null)) | head -20"
  },
  "dependencies": {
    "@anthropic-ai/sdk": "^0.63.0",
    "@heroicons/react": "^2.2.0",
    "@instantdb/admin": "^0.21.17",
    "@instantdb/react": "^0.21.14",
    "@modelcontextprotocol/sdk": "^1.20.1",
    "@opentelemetry/api-logs": "^0.57.2",
    "@prisma/client": "^6.16.2",
    "@radix-ui/react-icons": "^1.3.2",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-select": "^2.2.6",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.2.6",
    "@radix-ui/react-tabs": "^1.1.13",
    "@tailwindcss/aspect-ratio": "^0.4.2",
    "@tailwindcss/forms": "^0.5.10",
    "@tailwindcss/postcss": "^4.1.14",
    "@tailwindcss/typography": "^0.5.17",
    "@types/bcryptjs": "^2.4.6",
    "@types/crypto-js": "^4.2.2",
    "@types/jsonwebtoken": "^9.0.10",
    "@types/pg": "^8.15.5",
    "@types/ws": "^8.18.1",
    "@vercel/blob": "^2.0.0",
    "@vercel/otel": "^1.13.0",
    "bcryptjs": "^3.0.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "compression": "^1.8.1",
    "critters": "^0.0.23",
    "crypto-js": "^4.2.0",
    "express-rate-limit": "^8.1.0",
    "form-data": "^4.0.4",
    "framer-motion": "^12.23.12",
    "fuse.js": "^7.1.0",
    "helmet": "^8.1.0",
    "ioredis": "^5.7.0",
    "jsonwebtoken": "^9.0.2",
    "lucide-react": "^0.544.0",
    "next": "15.5.3",
    "next-auth": "^5.0.0-beta.29",
    "openai": "^5.21.0",
    "pg": "^8.16.3",
    "prisma": "^6.16.2",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "tailwind-merge": "^3.3.1",
    "tailwindcss": "^4.1.14",
    "tailwindcss-animate": "^1.0.7",
    "ws": "^8.18.3",
    "zod": "3.23.8"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@playwright/test": "^1.47.0",
    "@testing-library/jest-dom": "^6.8.0",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^14.6.1",
    "@types/jest": "^30.0.0",
    "@types/node": "^20.19.13",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.5.3",
    "husky": "^9.1.7",
    "jest": "^30.1.3",
    "jest-environment-jsdom": "^30.1.2",
    "lint-staged": "^16.1.6",
    "playwright": "^1.47.0",
    "prettier": "^3.6.2",
    "tsx": "^4.20.6",
    "typescript": "^5"
  },
  "overrides": {
    "zod": "3.23.8"
  },
  "scripts-info": {
    "test:ai:quality": "Run AI content quality tests",
    "test:accessibility": "Run accessibility tests with aXe",
    "test:mobile": "Run mobile-specific E2E tests",
    "test:performance:full": "Run comprehensive performance tests",
    "test:security:scan": "Run security vulnerability tests",
    "test:all": "Run complete test suite"
  },
  "lint-staged": {
    "src/**/*.{js,jsx,ts,tsx}": [
      "prettier --write"
    ],
    "scripts/**/*.js": [
      "prettier --write"
    ],
    "*.{json,css,md}": [
      "prettier --write"
    ]
  }
}
